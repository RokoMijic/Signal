rm_ml$price = rm_ml$price/600000
rm_ml$date_created_bucket = rm_ml$date_created_bucket/max(rm_ml$date_created_bucket)
rm_ml$num_photos = rm_ml$num_photos/max(rm_ml$num_photos)
rm_ml$num_bedrooms = rm_ml$num_bedrooms/max(rm_ml$num_bedrooms)
rated_gg =  rm_proc[good==1 | great==1,]
rated_bad = rm_ml[bad==1,]
head(rm_ml)
#rm_ml is now between 0 and 1 inclusive, with no ratings and no ids, no excluded
pc_obj = prcomp(rm_ml)
pc_rm = data.frame(pc_obj$x)
pc_stdev = pc_obj$sdev
plot(pc_stdev)
head(pc_rm)
(ggplot() + geom_point(data = pc_rm, aes(x=PC1, y=PC2), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC1, y=PC2), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC1, y=PC2), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC1, y=PC2), alpha=0.1, color = "darkred")
)
head(rm_ml)
(ggplot() + geom_point(data = pc_rm, aes(x=PC2, y=PC3), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC2, y=PC3), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC2, y=PC3), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC2, y=PC3), alpha=0.1, color = "darkred")
)
(ggplot() + geom_point(data = pc_rm, aes(x=PC3, y=PC4), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC3, y=PC4), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC3, y=PC4), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC3, y=PC4), alpha=0.1, color = "darkred")
)
(ggplot() + geom_point(data = pc_rm, aes(x=PC4, y=PC5), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC4, y=PC5), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC4, y=PC5), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC4, y=PC5), alpha=0.1, color = "darkred")
)
(ggplot() + geom_point(data = pc_rm, aes(x=PC1, y=PC3), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC1, y=PC3), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC1, y=PC3), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC1, y=PC3), alpha=0.1, color = "darkred")
)
(ggplot() + geom_point(data = pc_rm, aes(x=PC1, y=PC4), alpha=0.015)
+ geom_point(data = pc_rm[goodnames,], aes(x=PC1, y=PC4), alpha=0.7, color = "darkgreen")
+ geom_point(data = pc_rm[greatnames,], aes(x=PC1, y=PC4), alpha=0.7, color = "green")
+ geom_point(data = pc_rm[badnames,], aes(x=PC1, y=PC4), alpha=0.1, color = "darkred")
)
load_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id   #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
load_clean_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id         #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
rm_ml = load_normalized_housing_data()   #load the data
goodnames = row.names(rm_ml[good==1,])
greatnames = row.names(rm_ml[great==1,])
badnames = row.names(rm_ml[bad==1,])
rm_ml$scraped_rightmove_id = NULL     # drop the rmid column from rm_ml
rm_ml$excluded = NULL          # drop whether it is excluded
rm_ml$rated_good = NULL        #
rm_ml$rated_bad = NULL         # drop the ratings
rm_ml$rated_great = NULL       #
rm_ml = load_normalized_housing_data()   #load the data
#######  get the names of the good, bad, great houses ######
goodnames = row.names(rm_ml[good==1,])
greatnames = row.names(rm_ml[great==1,])
badnames = row.names(rm_ml[bad==1,])
###### drop unwanted columns ######
rm_ml$scraped_rightmove_id = NULL     # drop the rmid column from rm_ml
rm_ml$excluded = NULL          # drop whether it is excluded
rm_ml$rated_good = NULL        #
rm_ml$rated_bad = NULL         # drop the ratings
rm_ml$rated_great = NULL       #
head(rm_ml)
#rm_ml is now between 0 and 1 inclusive, with no ratings and no ids, no excluded
load_clean_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id         #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
rm_ml = load_normalized_housing_data()   #load the data
#######  get the names of the good, bad, great houses ######
goodnames = row.names(rm_ml[good==1,])
greatnames = row.names(rm_ml[great==1,])
badnames = row.names(rm_ml[bad==1,])
###### drop unwanted columns ######
rm_ml$scraped_rightmove_id = NULL     # drop the rmid column from rm_ml
rm_ml$excluded = NULL          # drop whether it is excluded
rm_ml$rated_good = NULL        #
rm_ml$rated_bad = NULL         # drop the ratings
rm_ml$rated_great = NULL       #
head(rm_ml)
#rm_ml is now between 0 and 1 inclusive, with no ratings and no ids, no excluded
goodnames = row.names(rm_ml[rated_good==1,])
greatnames = row.names(rm_ml[rated_great==1,])
badnames = row.names(rm_ml[rated_bad==1,])
goodnames = row.names(rm_ml[rm_ml$rated_good==1,])
greatnames = row.names(rm_ml[rm_ml$rated_great==1,])
badnames = row.names(rm_ml[rm_ml$rated_bad==1,])
rm_ml = load_normalized_housing_data()   #load the data
#######  get the names of the good, bad, great houses ######
goodnames = row.names(rm_ml[rm_ml$rated_good==1,])
greatnames = row.names(rm_ml[rm_ml$rated_great==1,])
badnames = row.names(rm_ml[rm_ml$rated_bad==1,])
###### drop unwanted columns ######
rm_ml$scraped_rightmove_id = NULL     # drop the rmid column from rm_ml
rm_ml$excluded = NULL          # drop whether it is excluded
rm_ml$rated_good = NULL        #
rm_ml$rated_bad = NULL         # drop the ratings
rm_ml$rated_great = NULL       #
head(rm_ml)
#rm_ml is now between 0 and 1 inclusive, with no ratings and no ids, no excluded
pc_obj = prcomp(rm_ml)
pc_rm = data.frame(pc_obj$x)
pc_stdev = pc_obj$sdev
plot(pc_stdev)
library(dplyr)
library(dplyr)
load_clean_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id         #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,contains("lat")))
}
head(load_just_location_price())
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat")))
}
head(load_just_location_price())
return(select(rm_ml,starts_with("lat") | starts_with("long")  ))
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat") or starts_with("long")  ))
}
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat"), starts_with("long")  ))
}
head(load_just_location_price())
return(select(rm_ml,starts_with("lat"), starts_with("long"),starts_with("price")  ))
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat"), starts_with("long"),starts_with("price")  ))
}
head(load_just_location_price())
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat"), starts_with("long"),starts_with("price")  ))
}
library(dplyr)
load_clean_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id         #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat"), starts_with("long"),starts_with("price")  ))
}
library(dplyr)
load_clean_housing_data = function()
{
rm_raw = read.csv('rightmove1_0.csv')
rm_proc = rm_raw
rm_proc = rm_proc[rm_proc$excluded == 0,]                 #lose excluded houses
rm_proc = rm_proc[rm_proc$num_bedrooms <= 50,]            #lose unreasonable numbers of bedrooms
rm_proc = rm_proc[rm_proc$num_photos <= 50,]              #lose unreasonable numbers of photos
rm_proc = rm_proc[rm_proc$date_created_bucket >= 19,]     #need to lose properties from before we started rating
row.names(rm_proc) = rm_proc$scraped_rightmove_id         #set row names
return(rm_proc)
}
load_normalized_housing_data = function()
{
rm_norm  = load_clean_housing_data()
###### normalize stuff ########
rm_norm$price = rm_norm$price/600000
rm_norm$date_created_bucket = rm_norm$date_created_bucket/max(rm_norm$date_created_bucket)
rm_norm$num_photos = rm_norm$num_photos/max(rm_norm$num_photos)
rm_norm$num_bedrooms = rm_norm$num_bedrooms/max(rm_norm$num_bedrooms)
return(rm_norm)
}
load_just_location_price = function()
{
rm_ml = load_normalized_housing_data()
return(select(rm_ml,starts_with("lat"), starts_with("long"),starts_with("price")  ))
}
rm_loc_price = load_just_location_price()
head(rm_loc_price)
install.packages(neuralnet)
install.packages("neuralnet")
library(neuralnet)
df = draw_xy(100000)
draw_xy = function(k)
{
x = runif(k, min = 0, max = 1)
y = runif(k, min = 0, max = x)
answer = data.frame(x,y)
return(answer)
}
df = draw_xy(100000)
bin_results = function(df,w=0.01)
{
N_bins = as.integer(1/w)
rows = nrow(df)
bins = rep(0,N_bins)
bincounts = rep(0,N_bins)
for( j in c(1:rows))
{
for( i in c(1:N_bins))
{
if(((i-1)*w  <=  df[[j,'y']]) & (df[[j,'y']] < i*w )  )
{
bins[[i]] = bins[[i]] + df[[j,'x']]
bincounts[[i]] = bincounts[[i]] + 1
}
}
}
averages = bins/bincounts
print(bins)
print(bincounts)
return(averages)
}
binned = bin_results(df)
df = draw_xy(10000)
bin_results = function(df,w=0.01)
{
N_bins = as.integer(1/w)
rows = nrow(df)
bins = rep(0,N_bins)
bincounts = rep(0,N_bins)
for( j in c(1:rows))
{
for( i in c(1:N_bins))
{
if(((i-1)*w  <=  df[[j,'y']]) & (df[[j,'y']] < i*w )  )
{
bins[[i]] = bins[[i]] + df[[j,'x']]
bincounts[[i]] = bincounts[[i]] + 1
}
}
}
averages = bins/bincounts
print(bins)
print(bincounts)
return(averages)
}
binned = bin_results(df)
binned
bin_results = function(df,w=0.01)
{
N_bins = as.integer(1/w)
rows = nrow(df)
bins = rep(0,N_bins)
bincounts = rep(0,N_bins)
for( j in c(1:rows))
{
for( i in c(1:N_bins))
{
if(((i-1)*w  <=  df[[j,'y']]) & (df[[j,'y']] < i*w )  )
{
bins[[i]] = bins[[i]] + df[[j,'x']]
bincounts[[i]] = bincounts[[i]] + 1
}
}
}
average_Xs = bins/bincounts
binmaxes = seq(0,1, w)
return(data.frame(binmaxes, average_Xs))
}
df = draw_xy(10000)
binned = bin_results(df)
bin_results = function(df,w=0.01)
{
N_bins = as.integer(1/w)
rows = nrow(df)
bins = rep(0,N_bins)
bincounts = rep(0,N_bins)
for( j in c(1:rows))
{
for( i in c(1:N_bins))
{
if(((i-1)*w  <=  df[[j,'y']]) & (df[[j,'y']] < i*w )  )
{
bins[[i]] = bins[[i]] + df[[j,'x']]
bincounts[[i]] = bincounts[[i]] + 1
}
}
}
average_Xs = bins/bincounts
binmaxes = seq(w,1, w)
return(data.frame(binmaxes, average_Xs))
}
binned = bin_results(df)
library(ggplot2)
ggplot2( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + geom_smooth()
library(ggplot2)
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + geom_smooth()
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function((x-1))/(ln(X)))
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function(  (x-1)/(ln(X))  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun =  (x-1)/(ln(X))  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun =  (binmaxes-1)/(ln(binmaxes))  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = function(x){ (x-1)/(ln(X))}  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = function(x){ (x-1)/(log(X))}  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = {function(x) (x-1)/(log(X))}  )
myfunc = {function(x) (x-1)/(log(X))}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = myfunc  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = dnorm  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = test  )
test <- function(x) {x ^ 2 + x + 20}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = test  )
myfunc = function(x) {(x-1)/(log(X))}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = myfunc  )
myfunc <- function(x) {(x-1)/(log(X))}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = myfunc  )
test <- function(x) {x ^ 2 + x + 20}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = test  )
myfunc <- function(x) {(x-1)/(log(x))}
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = myfunc  )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = (function(x) {x ^ 2 + x + 20}), colour = "red"   )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = (function(x) {(x-1)/(log(x))}), colour = "red"   )
ggplot( binned, aes(x = binmaxes, y = average_Xs ) ) + geom_point() + stat_function( fun = (function(x) {(x-1)/(log(x))}), colour = "red"   )
library(psych)
install.packages('psych')
library(psych)
msq
help(msq)
df = msq
head(df)
na_df = is.na(df)
head(na_df)
na_df = as.integer(is.na(df))
head(na_df)
na_df = is.na(df)
head(na_df)
num_nas = colSums(na_df)
num_nas
num_nas = sort(colSums(na_df))
num_nas
na_df = as.integer(is.na(df))
head(na_df)
na_df = is.na(df)
head(na_df)
num_nas = sort(colSums(na_df))
num_nas = colSums(na_df)
num_nas
numrows = nrow(df)
frac_nas = num_nas/numrows
frac_nas
sorted_fracs = sort(frac_nas)
sorted_fracs
sorted_fracs = sort(frac_nas, decreasing = true() )
sorted_fracs
library(dplyr)
head(df)
selected_data = select(df, active:scornful, Extraversion, Neuroticism )
head(selected_data)
selected_data[is.na(selected_data)] = colMeans(selected_data, na.rm = true)
selected_data[is.na(selected_data)] = colMeans(selected_data, na.rm =TRUE)
na.aggregate(selected_data)
library(zoo)
na.aggregate(selected_data)
library(zoo)
install.packages('zoo')
library(dplyr)
library(zoo)
na.aggregate(selected_data)
ggplot()  + geom_histogram(data = na_agg_sel, x = Extraversion)
ggplot()  + geom_histogram(data = na_agg_sel, x = 'Extraversion')
na_agg_sel = na.aggregate(selected_data)
ggplot()  + geom_histogram(data = na_agg_sel, x = 'Extraversion')
ggplot()  + geom_histogram(data = na_agg_sel, x = Extraversion)
ggplot()  + geom_histogram(data = na_agg_sel, x = 'Extraversion')
selected_data = select(df, active:scornful, Extraversion, Neuroticism )
head(selected_data)
na_agg_sel = na.aggregate(selected_data)
ggplot()  + geom_histogram(data = na_agg_sel, x = 'Extraversion')
ggplot(data = na_agg_sel, aes(x = 'Extraversion'))  + geom_histogram(binwidth = 0.1 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(binwidth = 0.1 )
head(na_agg_sel)
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count", binwidth = 1 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count" )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count" )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + stat_count(stat = "count" )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + stat_count( )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count" )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count", binwidth = 1 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_histogram(stat = "count", binwidth = 1, bins = 30 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_bar(stat = "count", binwidth = 1, bins = 30 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_bar(stat = "count",  bins = 30 )
ggplot(data = na_agg_sel, aes( 'Extraversion'))  + geom_bar(stat = "count" )
qplot(na_agg_sel$Extraversion, geom="histogram")
qplot(na_agg_sel$Neuroticism, geom="histogram")
ggplot(aes(x = "Extraversion", y = "Neuroticism")) + geom_point() + geom_smooth()
ggplot(aes(x = "Extraversion", y = "Neuroticism")) + geom_point() + geom_smooth()
ggplot(data =na_agg_sel, aes(x = "Extraversion", y = "Neuroticism")) + geom_point() + geom_smooth()
ggplot(data =na_agg_sel, aes(x = "Extraversion", y = "Neuroticism")) + geom_point()
)
na_agg_sel = na.aggregate(selected_data)
ggplot(data = na_agg_sel, aes(x = "Extraversion", y = "Neuroticism")) + geom_point()
ggplot(data = na_agg_sel ) + geom_point(aes(x = "Extraversion", y = "Neuroticism"))
ggplot( ) + geom_point(data = na_agg_sel, aes(x = "Extraversion", y = "Neuroticism"))
ggplot( ) + geom_point(data = na_agg_sel, aes(Extraversion, Neuroticism))
ggplot( ) + geom_point(data = na_agg_sel, aes(Extraversion, Neuroticism)) + geom_smooth()
ggplot( ) + geom_point(data = na_agg_sel, aes(Extraversion, Neuroticism)) + geom_smooth()
ggplot(data = na_agg_sel, aes(Extraversion, Neuroticism) ) + geom_point() + geom_smooth()
lm(Extraversion ~ -Neuroticism, data  = na_agg_sel)
lm(Extraversion ~ - . Neuroticism, data  = na_agg_sel)
lm(Extraversion ~  . -Neuroticism, data  = na_agg_sel)
lm( Neuroticism ~  . - Extraversion, data  = na_agg_sel)
extra_model = lm(Extraversion ~  . -Neuroticism, data  = na_agg_sel)
neuro_model = lm( Neuroticism ~  . - Extraversion, data  = na_agg_sel)
extra_coeffs = coefs(extra_model)
neoro_coefs = coefs(neuro_model)
extra_coeffs = coef(extra_model)
neoro_coefs = coef(neuro_model)
extra_coeffs = sort(coef(extra_model),decreasing = true  )
extra_coeffs = sort(coef(extra_model), decreasing = TRUE  )
neoro_coefs = sort(coef(neuro_model), decreasing = TRUE  )
extra_coeffs
neoro_coefs
